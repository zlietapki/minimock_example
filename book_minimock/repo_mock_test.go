package book_minimock

// Code generated by http://github.com/gojuno/minimock (3.0.10). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepoMock implements Repo
type RepoMock struct {
	t minimock.Tester

	funcCount          func(author string) (i1 int)
	inspectFuncCount   func(author string)
	afterCountCounter  uint64
	beforeCountCounter uint64
	CountMock          mRepoMockCount
}

// NewRepoMock returns a mock for Repo
func NewRepoMock(t minimock.Tester) *RepoMock {
	m := &RepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CountMock = mRepoMockCount{mock: m}
	m.CountMock.callArgs = []*RepoMockCountParams{}

	return m
}

type mRepoMockCount struct {
	mock               *RepoMock
	defaultExpectation *RepoMockCountExpectation
	expectations       []*RepoMockCountExpectation

	callArgs []*RepoMockCountParams
	mutex    sync.RWMutex
}

// RepoMockCountExpectation specifies expectation struct of the Repo.Count
type RepoMockCountExpectation struct {
	mock    *RepoMock
	params  *RepoMockCountParams
	results *RepoMockCountResults
	Counter uint64
}

// RepoMockCountParams contains parameters of the Repo.Count
type RepoMockCountParams struct {
	author string
}

// RepoMockCountResults contains results of the Repo.Count
type RepoMockCountResults struct {
	i1 int
}

// Expect sets up expected params for Repo.Count
func (mmCount *mRepoMockCount) Expect(author string) *mRepoMockCount {
	if mmCount.mock.funcCount != nil {
		mmCount.mock.t.Fatalf("RepoMock.Count mock is already set by Set")
	}

	if mmCount.defaultExpectation == nil {
		mmCount.defaultExpectation = &RepoMockCountExpectation{}
	}

	mmCount.defaultExpectation.params = &RepoMockCountParams{author}
	for _, e := range mmCount.expectations {
		if minimock.Equal(e.params, mmCount.defaultExpectation.params) {
			mmCount.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCount.defaultExpectation.params)
		}
	}

	return mmCount
}

// Inspect accepts an inspector function that has same arguments as the Repo.Count
func (mmCount *mRepoMockCount) Inspect(f func(author string)) *mRepoMockCount {
	if mmCount.mock.inspectFuncCount != nil {
		mmCount.mock.t.Fatalf("Inspect function is already set for RepoMock.Count")
	}

	mmCount.mock.inspectFuncCount = f

	return mmCount
}

// Return sets up results that will be returned by Repo.Count
func (mmCount *mRepoMockCount) Return(i1 int) *RepoMock {
	if mmCount.mock.funcCount != nil {
		mmCount.mock.t.Fatalf("RepoMock.Count mock is already set by Set")
	}

	if mmCount.defaultExpectation == nil {
		mmCount.defaultExpectation = &RepoMockCountExpectation{mock: mmCount.mock}
	}
	mmCount.defaultExpectation.results = &RepoMockCountResults{i1}
	return mmCount.mock
}

//Set uses given function f to mock the Repo.Count method
func (mmCount *mRepoMockCount) Set(f func(author string) (i1 int)) *RepoMock {
	if mmCount.defaultExpectation != nil {
		mmCount.mock.t.Fatalf("Default expectation is already set for the Repo.Count method")
	}

	if len(mmCount.expectations) > 0 {
		mmCount.mock.t.Fatalf("Some expectations are already set for the Repo.Count method")
	}

	mmCount.mock.funcCount = f
	return mmCount.mock
}

// When sets expectation for the Repo.Count which will trigger the result defined by the following
// Then helper
func (mmCount *mRepoMockCount) When(author string) *RepoMockCountExpectation {
	if mmCount.mock.funcCount != nil {
		mmCount.mock.t.Fatalf("RepoMock.Count mock is already set by Set")
	}

	expectation := &RepoMockCountExpectation{
		mock:   mmCount.mock,
		params: &RepoMockCountParams{author},
	}
	mmCount.expectations = append(mmCount.expectations, expectation)
	return expectation
}

// Then sets up Repo.Count return parameters for the expectation previously defined by the When method
func (e *RepoMockCountExpectation) Then(i1 int) *RepoMock {
	e.results = &RepoMockCountResults{i1}
	return e.mock
}

// Count implements Repo
func (mmCount *RepoMock) Count(author string) (i1 int) {
	mm_atomic.AddUint64(&mmCount.beforeCountCounter, 1)
	defer mm_atomic.AddUint64(&mmCount.afterCountCounter, 1)

	if mmCount.inspectFuncCount != nil {
		mmCount.inspectFuncCount(author)
	}

	mm_params := &RepoMockCountParams{author}

	// Record call args
	mmCount.CountMock.mutex.Lock()
	mmCount.CountMock.callArgs = append(mmCount.CountMock.callArgs, mm_params)
	mmCount.CountMock.mutex.Unlock()

	for _, e := range mmCount.CountMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1
		}
	}

	if mmCount.CountMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCount.CountMock.defaultExpectation.Counter, 1)
		mm_want := mmCount.CountMock.defaultExpectation.params
		mm_got := RepoMockCountParams{author}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCount.t.Errorf("RepoMock.Count got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCount.CountMock.defaultExpectation.results
		if mm_results == nil {
			mmCount.t.Fatal("No results are set for the RepoMock.Count")
		}
		return (*mm_results).i1
	}
	if mmCount.funcCount != nil {
		return mmCount.funcCount(author)
	}
	mmCount.t.Fatalf("Unexpected call to RepoMock.Count. %v", author)
	return
}

// CountAfterCounter returns a count of finished RepoMock.Count invocations
func (mmCount *RepoMock) CountAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCount.afterCountCounter)
}

// CountBeforeCounter returns a count of RepoMock.Count invocations
func (mmCount *RepoMock) CountBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCount.beforeCountCounter)
}

// Calls returns a list of arguments used in each call to RepoMock.Count.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCount *mRepoMockCount) Calls() []*RepoMockCountParams {
	mmCount.mutex.RLock()

	argCopy := make([]*RepoMockCountParams, len(mmCount.callArgs))
	copy(argCopy, mmCount.callArgs)

	mmCount.mutex.RUnlock()

	return argCopy
}

// MinimockCountDone returns true if the count of the Count invocations corresponds
// the number of defined expectations
func (m *RepoMock) MinimockCountDone() bool {
	for _, e := range m.CountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCount != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		return false
	}
	return true
}

// MinimockCountInspect logs each unmet expectation
func (m *RepoMock) MinimockCountInspect() {
	for _, e := range m.CountMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepoMock.Count with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CountMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		if m.CountMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepoMock.Count")
		} else {
			m.t.Errorf("Expected call to RepoMock.Count with params: %#v", *m.CountMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCount != nil && mm_atomic.LoadUint64(&m.afterCountCounter) < 1 {
		m.t.Error("Expected call to RepoMock.Count")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCountInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCountDone()
}
